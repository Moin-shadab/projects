#include <LiquidCrystal.h>
#include <EEPROM.h>

// Pin definitions for LCD
const int LCD_RS = 8;
const int LCD_ENABLE = 9;
const int LCD_D4 = 4;
const int LCD_D5 = 5;
const int LCD_D6 = 6;
const int LCD_D7 = 7;
const int BACKLIGHT = 10;
const int BUTTON_PIN = A0; // Button connected to A0 pin
const int PNP_SENSOR_PIN = A1; // PNP sensor pin

// Relay pin definitions
const int RELAY1_PIN = 2;
const int RELAY2_PIN = 3;

// Initialize the LCD with the interface pins
LiquidCrystal lcd(LCD_RS, LCD_ENABLE, LCD_D4, LCD_D5, LCD_D6, LCD_D7);

// Button value thresholds
int buttonValues[5] = {50, 200, 400, 600, 800}; 

int currentSelection = 0;
bool inSettingsMode = false;
bool inMainMenu = true;
bool inSetR1Mode = false;
bool inSetR2Mode = false;
bool inStartMode = false; // New flag for Start mode
bool isOff = false;
bool buttonPressed = false;
float setR1Time = 0.0; // Time for Relay 1
float setDelayTime = 0.0; // Time for Relay 2
float stepSize = 0.1; // Increment/Decrement step size
unsigned long relay1StartTime = 0;
unsigned long relay2StartTime = 0;
bool isRelay1Active = false; // Track if Relay 1 is active
bool isRelay2Active = false; // Track if Relay 2 is active
bool flag = false; // Track if Relay 2 is active
unsigned long buttonPressStartTime = 0; // Timer for long press
bool longPressDetected = false; // Flag for long press
unsigned long relayDelayStartTime = 0; // Timer for delay before Relay 2 activates

// EEPROM addresses for saving times
const int EEPROM_ADDR_R1_TIME = 0;
const int EEPROM_ADDR_R2_TIME = 4; // Different EEPROM address for Set R2

// Menu items
// char* menuItems[2] = {"1: Settings", "2: Start"}; 
char* menuItems[2] = { "1: Start"}; 

char* settingItems[3] = {"Set R1", "Set D.Time", "Back"}; 
int currentSettingSelection = 0;

void setup() {
    Serial.begin(9600); // Initialize serial communication
    lcd.begin(16, 2);
    pinMode(BACKLIGHT, OUTPUT);
    digitalWrite(BACKLIGHT, HIGH);
    
    pinMode(RELAY1_PIN, OUTPUT);
    pinMode(RELAY2_PIN, OUTPUT);
    pinMode(PNP_SENSOR_PIN, INPUT); // Set PNP sensor pin as input
    
    digitalWrite(RELAY1_PIN, LOW);
    digitalWrite(RELAY2_PIN, LOW);
    
    // Load saved times from EEPROM with a default value fallback
    EEPROM.get(EEPROM_ADDR_R1_TIME, setR1Time);
    EEPROM.get(EEPROM_ADDR_R2_TIME, setDelayTime);
    // If R1 or R2 time are uninitialized, assign default values
    if (isnan(setR1Time) || setR1Time < 0.0 || setR1Time > 99.9) {
        setR1Time = 0.0;
    }
    if (isnan(setDelayTime) || setDelayTime < 0.0 || setDelayTime > 99.9) {
        setDelayTime = 0.0;
    }
    
    displayMenu();
}

void loop() {
    int buttonValue = analogRead(BUTTON_PIN);
    
    // Check if button is pressed
    if (buttonValue < buttonValues[0]) {
        if (!buttonPressed) {
            buttonPressed = true;
            buttonPressStartTime = millis(); // Start timer for long press
            longPressDetected = false; // Reset long press flag
        }
        // Check if button is being held down for more than 3 seconds
        if (millis() - buttonPressStartTime > 3000 && !longPressDetected) {
            longPressDetected = true; // Set long press detected flag
            if (!inSettingsMode) {
                enterSettingsMode(); // Open settings if not already in settings mode
            }
        }
    } else {
        buttonPressed = false; // Reset button pressed state
        if (longPressDetected) {
            longPressDetected = false; // Reset long press flag
        }
    }
    
    if (inMainMenu) {
        Serial.println("inMainMenu");
        handleMainMenu(buttonValue);
    } else if (inSettingsMode) {
        Serial.println("inSettingsMode");
        handleSettingsMode(buttonValue);
    } else if (inSetR1Mode) {
        Serial.println("inSetR1Mode");
        handleSetR1(buttonValue);
    } else if (inSetR2Mode) {
        Serial.println("inSetR2Mode");
        handleDelayR2(buttonValue);
    } else if (inStartMode) {
        Serial.println("inStartMode");
        handleStartMode();
    }

    // Handle button press to navigate back
    if (buttonValue < buttonValues[0] && !buttonPressed) { // Right button
        buttonPressed = true;
        if (inSetR1Mode) {
            inSetR1Mode = false;
            inSettingsMode = true;
            displaySettingsMenu();
        } else if (inSetR2Mode) {
            inSetR2Mode = false;
            inSettingsMode = true;
            displaySettingsMenu();
        } else if (inStartMode) {
            // Turn off both relays
            digitalWrite(RELAY1_PIN, LOW);
            digitalWrite(RELAY2_PIN, LOW);
            lcd.clear();
            lcd.print("Relays OFF");
            delay(1000);
            buttonPressed = false;
            inMainMenu = true;
            displayMenu();
        }
    }
    if (buttonValue >= buttonValues[0]) {
        buttonPressed = false;
    }
    delay(200);
}

void handleMainMenu(int buttonValue) {
    if (buttonValue < buttonValues[1] && !buttonPressed) { 
        // No up button action needed since only one item is available
    } else if (buttonValue < buttonValues[2] && !buttonPressed) {
        // No down button action needed since only one item is available
    } else if (buttonValue < buttonValues[4] && !buttonPressed) {
        buttonPressed = true;
        // Directly start without checking selection
        digitalWrite(RELAY1_PIN, LOW); 
        digitalWrite(RELAY2_PIN, LOW);
        displayStartMode();
    }
}

void displayMenu() {
    lcd.clear();
    for (int i = 0; i < 2; i++) {
        lcd.setCursor(1, i);
        if (currentSelection + i < 2) { // Changed from 4 to 2
            lcd.print(menuItems[currentSelection + i]);
        }
    }
    lcd.setCursor(0, 0);
    lcd.write('>');
}

void enterSettingsMode() {
    inSettingsMode = true;
    inMainMenu = false;
    currentSettingSelection = 0;
    displaySettingsMenu();
}

void handleSettingsMode(int buttonValue) {
    if (buttonValue < buttonValues[1] && !buttonPressed) {
        if (currentSettingSelection > 0) {
            currentSettingSelection--;
            displaySettingsMenu();
        }
    } else if (buttonValue < buttonValues[2] && !buttonPressed) {
        if (currentSettingSelection < 2) {
            currentSettingSelection++;
            displaySettingsMenu();
        }
    } else if (buttonValue < buttonValues[4] && !buttonPressed) {
        buttonPressed = true;
        if (currentSettingSelection == 2) {
            inSettingsMode = false;
            inMainMenu = true;
            displayMenu();
        } else if (currentSettingSelection == 0) {
            inSetR1Mode = true;
            inSettingsMode = false;
            displaySetR1();
        } else if (currentSettingSelection == 1) {
            inSetR2Mode = true;
            inSettingsMode = false;
            displaySetR2();
        }
    }
}

// New function to display the start mode
void displayStartMode() {
    Serial.println("start menu...");
    inMainMenu = false;
    inStartMode = true;
    lcd.clear();
    lcd.print(" Machine started ");
    delay(500);
}

// Add these declarations at the top with other global variables
unsigned long delayStartTime = 0; // Timer for delay before Relay 2 activates
float remainingDelayTime = 0.0;    // Remaining delay time before Relay 2 turns on

// void handleStartMode() {
//     // Check PNP sensor
//     // if (digitalRead(PNP_SENSOR_PIN) == HIGH) {
//         // Activate Relay 1
//         if (!isRelay1Active && !flag) { // agr relay 1 active nhi hai too relay 1 ko on  kro and status dhikhao 
//             digitalWrite(RELAY1_PIN, HIGH);
//             relay1StartTime = millis();
//             isRelay1Active = true;
//             lcd.clear();
//             lcd.print("R1 ON R2 OFF ");
//             lcd.setCursor(0, 1);
//             lcd.print("Delay Time ");
//         }

//         // Update display for remaining time
//         float elapsedR1 = (millis() - relay1StartTime) / 1000.0;
//         float remainingR1 = setR1Time - elapsedR1;

//         // Check if Relay 2 should be activated after delay
//         if (isRelay1Active && !isRelay2Active) {
//             float elapsedDelay = (millis() - relayDelayStartTime) / 1000.0; // Track delay
//             float remainingDelayTime = setDelayTime - elapsedDelay; // Remaining delay time

//             // Activate Relay 2 if delay is complete
//             if (remainingDelayTime <= 0) { // agr delay time khatm then r2 on 
//                 digitalWrite(RELAY2_PIN, HIGH);
//                 relay2StartTime = millis();
//                 isRelay2Active = true;
//                 flag = true;
//                 lcd.clear();
//                 lcd.print("R1 OFF R2 ON ");
//                 lcd.setCursor(0, 1);
//                 lcd.print("Delay Time ");
//             }
//         }

//         // Handle Relay 1 and Relay 2 timers
//         float elapsedR2 = (isRelay2Active) ? (millis() - relay2StartTime) / 1000.0 : 0.0;
//         float remainingR2 = setDelayTime - elapsedR2;

//         // Display timers
//         lcd.setCursor(13, 0);
//         lcd.print(remainingR1 > 0 ? remainingR1 : 0.0, 1);
        
//         lcd.setCursor(13, 1);
//         lcd.print(remainingR2 > 0 ? remainingR2 : 0.0, 1);

//         // Turn off relays when their time is up
//         if (remainingR1 <= 0) {
//             flag = true; // Set flag to true to indicate Relay 1 has finished
//             digitalWrite(RELAY1_PIN, LOW);
//             isRelay1Active = false;
//         }
//         if (remainingR2 <= 0) {
//             flag = false; // Reset flag for Relay 2
//             digitalWrite(RELAY2_PIN, LOW);
//             isRelay2Active = false;
//         }
       
//     // } else {
//     //     // If sensor is not triggered, ensure both relays are off
//     //     digitalWrite(RELAY1_PIN, LOW);
//     //     digitalWrite(RELAY2_PIN, LOW);
//     //     isRelay1Active = false;
//     //     isRelay2Active = false;
//     // }
// }

void handleStartMode() {
    // Check if Relay 1 is active
    if (!isRelay1Active) { // If Relay 1 is not active
        digitalWrite(RELAY1_PIN, HIGH); // Turn on Relay 1
        relay1StartTime = millis(); // Start the timer for Relay 1
        relayDelayStartTime = millis(); // Start the delay timer immediately
        isRelay1Active = true; // Set flag for Relay 1 active
        lcd.clear();
        lcd.print("R1 ON R2 OFF "); // Show status for Relay 1
        lcd.setCursor(0, 1);
        lcd.print("Delay Time "); // Show initial delay time
    }

    // Update display for remaining time for Relay 1
    float elapsedR1 = (millis() - relay1StartTime) / 1000.0; // Calculate elapsed time for R1
    float remainingR1 = setR1Time - elapsedR1; // Remaining time for Relay 1

    // Update display for remaining delay time
    float elapsedDelay = (millis() - relayDelayStartTime) / 1000.0; // Calculate elapsed delay time
    float remainingDelayTime = setDelayTime - elapsedDelay; // Remaining delay time

    // Display timers
    lcd.setCursor(13, 0);
    lcd.print(remainingR1 > 0 ? remainingR1 : 0.0, 1); // Display R1 timer

    lcd.setCursor(13, 1);
    lcd.print(remainingDelayTime > 0 ? remainingDelayTime : 0.0, 1); // Display delay timer

    // Check if delay time is complete
    if (remainingDelayTime <= 0 && !isRelay2Active) {
        digitalWrite(RELAY2_PIN, HIGH); // Turn on Relay 2
        relay2StartTime = millis(); // Start timer for Relay 2
        isRelay2Active = true; // Set flag for Relay 2 active
        lcd.clear();
        lcd.print("R1 OFF R2 ON "); // Show status for Relay 2
        lcd.setCursor(0, 1);
        lcd.print("R2 Time "); // Prepare to show R2 timer
    }

    // Handle timers for Relay 2
    float elapsedR2 = (isRelay2Active) ? (millis() - relay2StartTime) / 1000.0 : 0.0; // Calculate elapsed time for R2
    float remainingR2 = setR1Time - elapsedR2; // Remaining time for Relay 2 (same as R1)

    // Display R2 timer if Relay 2 is active
    if (isRelay2Active) {
        lcd.setCursor(13, 1);
        lcd.print(remainingR2 > 0 ? remainingR2 : 0.0, 1); // Display R2 timer
    }

    // Turn off relays when their time is up
    if (remainingR1 <= 0) {
        digitalWrite(RELAY1_PIN, LOW); // Turn off Relay 1
        isRelay1Active = false; // Reset Relay 1 active flag
    }
    if (remainingR2 <= 0) {
        digitalWrite(RELAY2_PIN, LOW); // Turn off Relay 2
        isRelay2Active = false; // Reset Relay 2 active flag
        lcd.clear();
        lcd.print("R1 OFF R2 OFF "); // Show status when both are off
    }
}

// Display the settings menu
void displaySettingsMenu() {
    Serial.println("display menu setting");
    lcd.clear();
    for (int i = 0; i < 2; i++) {
        lcd.setCursor(1, i);
        if (currentSettingSelection + i < 3) {
            lcd.print(settingItems[currentSettingSelection + i]);
        }
    }
    lcd.setCursor(0, 0);
    lcd.write('>');
}

void displaySetR1() {
    lcd.clear();
    lcd.print("Set R1 Time:");
    lcd.setCursor(0, 1);
    lcd.print(setR1Time, 1); // Display time with one decimal place
    lcd.print(" sec");
}

void handleSetR1(int buttonValue) {
    if (buttonValue < buttonValues[1] && !buttonPressed) { // Up button
        setR1Time += stepSize;
        if (setR1Time > 99.9) setR1Time = 99.9; // Max limit
        displaySetR1();
    } else if (buttonValue < buttonValues[2] && !buttonPressed) { // Down button
        setR1Time -= stepSize;
        if (setR1Time < 0.0) setR1Time = 0.0; // Min limit
        displaySetR1();
    } else if (buttonValue < buttonValues[4] && !buttonPressed) { // Select button
        buttonPressed = true;
        // Save time to EEPROM
        EEPROM.put(EEPROM_ADDR_R1_TIME, setR1Time);
        lcd.clear();
        lcd.print("Successfully set");
        delay(2000);
        inSetR1Mode = false;
        inSettingsMode = true;
        displaySettingsMenu();
    }
}

void displaySetR2() {
    lcd.clear();
    lcd.print("Set Delay Time:");
    lcd.setCursor(0, 1);
    lcd.print(setDelayTime, 1); // Display time with one decimal place
    lcd.print(" sec");
}

void handleDelayR2(int buttonValue) {
    if (buttonValue < buttonValues[1] && !buttonPressed) { // Up button
        setDelayTime += stepSize;
        if (setDelayTime > 99.9) setDelayTime = 99.9; // Max limit
        displaySetR2();
    } else if (buttonValue < buttonValues[2] && !buttonPressed) { // Down button
        setDelayTime -= stepSize;
        if (setDelayTime < 0.0) setDelayTime = 0.0; // Min limit
        displaySetR2();
    } else if (buttonValue < buttonValues[4] && !buttonPressed) { // Select button
        buttonPressed = true;
        // Save time to EEPROM
        EEPROM.put(EEPROM_ADDR_R2_TIME, setDelayTime);
        lcd.clear();
        lcd.print("Successfully set");
        delay(2000);
        inSetR2Mode = false;
        inSettingsMode = true;
        displaySettingsMenu();
    }
}
